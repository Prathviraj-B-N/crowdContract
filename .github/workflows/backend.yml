---
name: testAndCreateDockerImageBackend
run-name: testAndCreateDockerImageBackend
on:
  push:
    paths:
       - 'server/**'
    branches:
      - main
    
jobs:
  build-frontend-push-img-to-Dockerhub:
    name: build dist for nginx container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 16
#       - name: build backend
#         run: |
#           cd client
#           npm install
#           npm run build
#       - name: Archive /dist as artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: dist
#           path: client/dist
#       -
#         name: Set up QEMU
#         uses: docker/setup-qemu-action@v2
      - name: npm install and test-db
        run: |
          cd server
          npm i
          echo "MONGO_URI='${{secrets.MONGO_URI}}'
                PORT=5051
                JWT_SECRET_KEY='${{secrets.JWT_SECRET_KEY}}'
                AES_SECRET_KEY='${{secrets.AES_SECRET_KEY}}'
                SALT_ROUNDS=5" > .env
          npm run test-db
          echo "MONGO_URI='${{secrets.MONGO_URI}}/crowdContract'
                PORT=5051
                JWT_SECRET_KEY='${{secrets.JWT_SECRET_KEY}}'
                AES_SECRET_KEY='${{secrets.AES_SECRET_KEY}}'
                SALT_ROUNDS=5" > .env

          npm run test-api
          rm .env
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
#       - name: copy dist to . from Artifacts
#         uses: actions/download-artifact@v3
#         with:
#           name: dist
        
      - name: build and push to DockerHub
        run: |
          docker buildx build --platform linux/amd64,linux/arm64/v8 --push --tag rohitraman/crowdcontract-backend:latest ./server
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
